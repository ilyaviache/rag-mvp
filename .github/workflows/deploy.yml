name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main  # Trigger deployment on push to main branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Prepare for deployment
        run: |
          npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      APP_PATH: /home/deploy/rag-mvp  # Define reusable app path
      APP_NAME: rag-mvp  # The name of your PM2 process

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean Droplet
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SERVER_IP }} << 'EOF'
            # Variables
            RELEASE_DIR="$APP_PATH/releases/$(date +'%Y%m%d%H%M%S')"
            CURRENT_DIR="$APP_PATH/current"
            ENV_FILE="$APP_PATH/.env"
            DOCS_DIR="$APP_PATH/docs"
            APP_NAME="$APP_NAME"
            
            # Create release directory
            mkdir -p $RELEASE_DIR
            
            # Clone the latest code into the new release folder
            git clone https://github.com/ilyaviache/rag-mvp.git $RELEASE_DIR
            
            # Copy the .env file into the new release folder
            cp $ENV_FILE $RELEASE_DIR/.env
            
            # Create symlink for the docs folder
            ln -sfn $DOCS_DIR $RELEASE_DIR/docs
            
            # Go to the release folder and install dependencies
            cd $RELEASE_DIR
            npm install
            npm run build
            
            # Update symlink to point to the new release
            ln -sfn $RELEASE_DIR $CURRENT_DIR

            # Check if the PM2 process is running
            if pm2 describe $APP_NAME > /dev/null; then
              # If running, restart the process
              echo "Restarting existing PM2 process..."
              pm2 restart $APP_NAME
            else
              # If not running, start a new process
              echo "Starting new PM2 process..."
              pm2 start $CURRENT_DIR/app.js --name $APP_NAME --env production
            fi
            
            # Save PM2 process list to start it on system reboot
            pm2 save
          EOF
